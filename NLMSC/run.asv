clear all; close all;
addpath(genpath('.'));
load NGS.mat;X{1} = data{1}; X{2} = data{2};X{3} = data{3};classid = truelabel{1}';
for v =1:length(X)
   X{v} = NormalizeFea(X{v},1); 
%   X{v} = X{v}./repmat(sqrt(sum(X{v}.^2,1)),size(X{v},1),1); 
end
disp('Performing ...');
begintime=tic;
Para.para1 = 1e0;    
Para.para2 = 1e2; 
Para.para3 = 1000;
Para.k = length(unique(classid));
k = length(unique(classid));
iter = 1;
for i1 = 1:iter               
    tic
    [out_Z,out_C,outL,Converg_values]   = NLMSC(X,Para);
    toc
    niter = 20;
    n = size(out_Z{1},1);
    mv = size(out_Z,2);

    Z = eye(n); % Z返回一个n*n的单位矩阵
    Zv = repmat(Z,[1,1,3]); % 把Z表示为行扩展一倍 列扩展一倍 维度扩展mv 3维矩阵
    c = length(unique(classid));  % 求单独的S的长度 去重
    wv = ones(mv,1)/mv; % 建立一个3行 1列的矩阵 全是1/3的矩阵 
    for v = 1:length(X)
        out_Z{v} = (out_Z{v}+out_Z{v}')/2;
    end
    disp(size(out_Z{v}))
    affinityMatrix = 0;
    for ii=1:niter
        disp(['now this is the ',num2str(ii),' th iter']);
         Z= (Z+Z')/2; % 转置 得到对称矩阵 
         for i=1:mv
            Zv(:,:,i)=out_Z{i};% 获取第i个样本的特征向量 f。
            T=Zv(:,:,i);% 将 Zv 的第i个切片赋给中间变量 T
            [T,~]=choose_neighbor_coefficient(T,300,500);  % T 邻居权重
            T=(T+T')/2; %将 T 变为对称矩阵
            Zv(:,:,i)=T; % 将更新后的 T 赋给 Zv
            wv(i)=1/2/norm(Zv(:,:,i)-Z,'fro'); % 计算权重 wv 式7
            M(:,:,i) = wv(i)*Zv(:,:,i); %更新矩阵 M wt*At  
         end
        for ij = 1:n
            Z(:,ij) = (sum(M(:,ij,:),3))/sum(wv);%更新矩阵 Z 式16
        end
        Z = Z - diag(diag(Z));
        result_idx  = spectral_clustering(Z, k);
        result_idx = double(result_idx);
        disp(' is finished.');
        [f_score,precision,recall] = compute_f(classid,result_idx);
        [~, cr,~, ~, ~] = CalClassificationRate(classid,result_idx);
        NMI = nmi(classid,result_idx);
        [acc,~,~ ] = CalcMetrics( classid,result_idx);
        [AR,RI,~,~] = RandIndex(classid,result_idx);
        disp("###################")
        disp([acc, NMI,f_score,precision,recall]) 
    end 
end

function [all] = distance(F,n,ij)
  for ji=1:n
      all(ji)=(norm(F(ij,:)-F(ji,:)))^2; 
  end
end
